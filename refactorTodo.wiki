=The last thing I was working on=

What I'm planning to do right now: work on the login

I need to clean it up before I can do anything useful with jwt. 

I have the jwt auth working at a basic level, I think. I think the next thing
for me to start working on is getting it so the views work based on who's
logged in. So it'll allow access to the index page by default, but it won't
give you the option to do anything except log in or register(maybe). 

%% Right now: User specific views
%% maybe a "thisUser" object to pass in the context. 

I think the cookies aren't working because i'm not able to set it to localhost:8080
so when I click a link from localhost:8080 and the link doesn't have the port,
it will still send a cookie or header. But when I type it in manually, like
localhost:8080/registration it doesn't send the cookie or at least sends it
improperly. 

So right now, fixing the cookie stuff. 


=A local to do list for this project=

* [o] fix how posts work
    * [X] The front part needs to be worked on, postclass and option helpers I think
        * [X] First order of business is fixing the posts collection and adding userid/privilege
            * [X] Maybe write a short script to do it programmatically? 
        * [X] After that I will just update postclass to work with the new context
    * [ ] 
* [ ] HTTPS
    * [ ] So the actual secure method would cost money, based on what I've read. 
          This will remain unchecked indefinitely I guess. 
          Although Apparently lets encrypt is a free certificate authority? 
* [ ] Add authorization/authentication based views
    * [ ] Users should be able to post. Admin should have remove post option as well. Guests should only be able to read it, but maybe find something guests can do.
    * [ ] Context should include variables, use handlebars if to render stuff
    * [ ] Something to determine authorization, like if someone makes a post 
          and it's not an appropriate user, don't make the post. 
* [O] Set up a good user registration
    * [X] Something that takes passwords, encrypts and salts them
        * [X] Figure out how to use Bcrypt
        * [X] Encrypt my current user's passwords
    * [X] Implement Bcrypt on the registration
    * [.] I need to clean it up somewhat
        * [X] Can't let people have the same username
        * [ ] This is a general thing as well but sanitizing inputs is probably important. 
        * [ ] 
* [o] Set up a way to persist the login
    * [X] Cookies
    * [ ] Figure out how it works for sure
* [ ] Set up a way to reset the password
* [ ] Once I have different abilities based on privilege, add some more
    * [ ] Turn the posts page into a forum thread
    * [ ] It would start as a basic forum, users can create more threads, admins delete/modify


=Side project=
* [ ] Another useful thing would be figuring out how to efficiently test stuff. It seems like a curl might be easier to do than loading the page in firefox. Maybe script that runs node + curl and exits? 
    * [ ] Figure out quick methods for testing my particular situation
    * [ ] investigate if there are more established/useful things that are applicable
* Node dashboard looks really cool. I don't know if I have any *real* use for it just yet. 
  
                                                                      But it looks cool. 



=Learned things=
* I think some of the problems with promisifications had to do with 1. the 
  mongojs library and 2. I didn't use the Async suffix.
* The order of how you register plugins and stuff like that matters. I spent a
  lot of time figuring out why jwt didn't register properly.
* Going hand in hand with the previous point, it is also important to maintain
  easy to read code. Part of why it was hard to figure out was because since I
  was putting together things from different examples, the styles/patterns of
  how everything was done was kind of different. Like the way hapi-struct
  registers plugins was slightly different from how the guy answering the
  github issue registers his plugins. Among other differences. 
* The missing piece in my jwt stuff was a callback in the validate function. 
  Surprisingly a lot of time figuring that out. At least I persisted though. 

vim: textwidth=80
