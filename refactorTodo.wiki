=The last thing I was working on=

Things that are being repeated right now: setting up context. 
I could probably do that smoother without defining it over and over again. 

For multiple forums
Perhaps something like using params
/forum=/thread=
if forum and no thread, pass in a context that indicates and displays such
if forum and thread, pass in a context that indcates and displays such

the params will be used for a mongodb query

So today at coffee and code I've tidied my code up a bit. I think it's a little
less confusing to read. 

I have also started work on moving beyond a single topic thread

**
Make at template/partial that shows the general forum groups based on what's in
the database collection
And then a template that shows the specific topic threads
I think the logic should be almost identical, just varying degree's of depth

So perhaps using url parameters for breadcrumbs and database querying
the path will be like '/forum/{something*}' 

pseudocode

/forum/generalforum
reply.view(youposted.html, threads)
/forum/generalforum/athreadinside
reply.veiw(youposted.html, athreadinside)



=A local to do list for this project=

* [ ] Housekeeping
    * [ ] I should clean it up in general, make it more modular
    * [ ] more DRY 
        * [ ] Context should be more dry
            * [ ] Perhaps linebreak conversion function
* [o] fix how posts work
    * [X] The front part needs to be worked on, postclass and option helpers I think
        * [X] First order of business is fixing the posts collection and adding userid/privilege
            * [X] Maybe write a short script to do it programmatically? 
        * [X] After that I will just update postclass to work with the new context
    * [ ] 
* [ ] Limit routes/ login attempts
* [ ] HTTPS
    * [ ] So the actual secure method would cost money, based on what I've read. 
          This will remain unchecked indefinitely I guess. 
          Although Apparently lets encrypt is a free certificate authority? 
* [ ] Add authorization/authentication based views
    * [ ] Users should be able to post. Admin should have remove post option as well. Guests should only be able to read it, but maybe find something guests can do.
    * [ ] Context should include variables, use handlebars if to render stuff
    * [ ] Something to determine authorization, like if someone makes a post 
          and it's not an appropriate user, don't make the post. 
* [O] Set up a good user registration
    * [X] Something that takes passwords, encrypts and salts them
        * [X] Figure out how to use Bcrypt
        * [X] Encrypt my current user's passwords
    * [X] Implement Bcrypt on the registration
    * [.] I need to clean it up somewhat
        * [X] Can't let people have the same username
        * [ ] This is a general thing as well but sanitizing inputs is probably important. 
        * [ ] 
* [o] Set up a way to persist the login
    * [X] Cookies
    * [ ] Figure out how it works for sure
* [ ] Set up a way to reset the password
* [ ] Once I have different abilities based on privilege, add some more
    * [ ] Turn the posts page into a forum thread
    * [ ] It would start as a basic forum, users can create more threads, admins delete/modify
    * [ ] Add administration abilities that don't require accessing the database
          with the mongo shell and allow generally useful things
      * [ ] Allow creation/deletion of servers
      * [ ] various admin/mod actions like:
          * [ ] deting posts
          * [ ] modding posts
          * [ ] banning user
          * [ ] suspending user
          * [ ] 
      * [ ] User abilities like:
          * [ ] Make a new thread
          * [ ] delete user's own post
          * [ ] edit user's own post
          * [ ] 


=Side project=
* [ ] Another useful thing would be figuring out how to efficiently test stuff. It seems like a curl might be easier to do than loading the page in firefox. Maybe script that runs node + curl and exits 
    * [ ] Figure out quick methods for testing my particular situation
    * [ ] investigate if there are more established/useful things that are applicable
* Node dashboard looks really cool. I don't know if I have any *real* use for it just yet. 
  
                                                                      But it looks cool. 



=Learned things=
* I think some of the problems with promisifications had to do with 1. the 
  mongojs library and 2. I didn't use the Async suffix.
* The order of how you register plugins and stuff like that matters. I spent a
  lot of time figuring out why jwt didn't register properly.
* Going hand in hand with the previous point, it is also important to maintain
  easy to read code. Part of why it was hard to figure out was because since I
  was putting together things from different examples, the styles/patterns of
  how everything was done was kind of different. Like the way hapi-struct
  registers plugins was slightly different from how the guy answering the
  github issue registers his plugins. Among other differences. 
* The missing piece in my jwt stuff was a callback in the validate function. 
  Surprisingly a lot of time figuring that out. At least I persisted though. 
* State only requires being set once, not every page. 

vim: textwidth=80
